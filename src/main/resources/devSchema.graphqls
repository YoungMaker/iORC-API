schema {
    query: Query
    mutation: Mutation
}

type Race {
    id : ID!
    name: String!
    description: String!
    version: String!
}


type Ability {
    str: Int!
    con: Int!
    dex: Int!
    int: Int!
    wis: Int!
    cha: Int!
}

input AbilityInput{
    str: Int!
    con: Int!
    dex: Int!
    int: Int!
    wis: Int!
    cha: Int!
}


input RaceInput {
    name: String!
    description: String!
    version: String!
}


type Character {
    id: ID!
    name: String!
    abilityPoints: Ability!
    race: Race
}


type Query {
    #the API version string
    version: String!
}

type Mutation {
    createCharacter( name: String!, abilityPoints: AbilityInput!, race: RaceInput!) : Character!
    updateName(id: ID!, name: String!): Character

    createRace(name: String!, version: String!,  dsecription: String!): Race!
    updateRace(id: ID!, name: String!, version: String!, dsecription: String!): Race
}

extend type Query {
    getCharacterById(id: ID!) : Character
    getCharactersByName(name: String!): [Character]!
    getRaceById(id: ID!): Race
    getRacesByName(name: String!) : [Race]!
}


