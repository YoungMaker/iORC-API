schema {
    query: Query
    mutation: Mutation
}

enum ObjType {
    RACE,
    CLASS,
    ITEM_SPELL,
    ITEM_WEAPON,
    ITEM_FEAT,
    ITEM_ARMOR,
    ITEM
}

type User{
    id: ID!
    email: String!
    uname: String!
    authorityLevels: [AuthorityLevel]!
}

input Context{
    token: String!
}

type ContextOut{
    token: String!
}

enum AuthorityLevel {
    ROLE_USER,
    ROLE_OWNER,
    ROLE_ADMIN
}

enum  AuthorityMode {
    MODE_VIEW,
    MODE_EDIT
}

type Slot{
    name: String!
    item: Item
    empty: Boolean
}

type Item{
    id: ID!
    name: String!
    description: String!
    price: String!
    modifiers: [Modifier]
    itemClasses: [String]
    version: String
    type: ObjType
}

type VersionInfo {
    id: ID!
    name: String!
    type: String!
    value: String!
}

type Stat{
    key: String!
    name: String!
    description: String!
    skill: Boolean
    modifiers: [Modifier]
}

type Version{
    version: String!
    stats: [Stat]
    infoList: [VersionInfo]
}

type Modifier {
    key: String!
    value: Float!
}

type Race {
    id : ID!
    name: String!
    description: String!
    version: String!
    modifiers: [Modifier]
    type: ObjType
}

type Class {
    id: ID!,
    name: String!,
    role: String!,
    description: String!,
    version: String!,
    modifiers: [Modifier],
    type: ObjType
}

type Ability {
    str: Int!
    con: Int!
    dex: Int!
    int: Int!
    wis: Int!
    cha: Int!
}

input AbilityInput{
    str: Int!
    con: Int!
    dex: Int!
    _int: Int!
    wis: Int!
    cha: Int!
}

union ModifierResult = Race | Class | Item

type Character {
    id: ID!
    version: String!
    name: String!
    abilityPoints: Ability!
    race: Race
    classql: Class
    inventory: [Item]!
    slots: [Slot]!
    money: Float!
}


type Query {
    #the API version string
    version: String!
}

type Mutation {

    updateCharacter(id: ID!, name: String!, abilityPoints: AbilityInput!, raceid: String!, classid: String!, context: Context!): Character!
    createCharacter( name: String!, abilityPoints: AbilityInput!, raceid: String!, classid: String!, version: String!, context: Context!) : Character!
    deleteCharacter(id: ID!, context: Context!): String!
    addItemToCharacter(id:ID!, itemid: ID!, context: Context!): Character!
    equipItem(id:ID!, itemid: ID!, slotid: String!, context: Context!): Character!
    purchaseItem(id:ID!, itemid: ID!, context: Context!): Character!
    setCharacterMoney(id: ID!, money: Float!, context: Context!): Character!

    createRace(name: String!, description: String!, version: String!): Race!
    updateRace(id: ID!, name: String!, version: String!, description: String!): Race

    createClass(name: String!, role: String!, version: String!, description: String! ): Class!
    updateClass(id: ID! name: String!, role: String!, version: String!, description: String! ): Class

    addModifier(id: ID!, type: ObjType!, key: String!, value: Float!) : ModifierResult
    removeModifier(id: ID!, type: ObjType!, key: String!) : ModifierResult

    addStatToVersion(key:String, name: String!, description: String!, version: String!, skill: Boolean!) : Version
    addStatBaseCalcModifier(statKey: String!, version: String!, key: String!, value: Float!): Stat
    removeStatBaseCalcModifier(statKey: String!, version: String!, key: String!): Stat

    addInfoToVersion(name: String!, version: String!, type: String!, value: String!): Version
    createVersion(version: String, context: Context!): Version

    addItemToVersion(name: String!, description: String!, price: Float!, classes: [String]!, version: String, type: ObjType! ) : Item

    createUser(email:String!, name:String!, password:String!): User
    createAdmin(email:String!, name:String!, password:String!, context: Context!): User!
    loginUser(email:String!, password: String!): ContextOut!
    deleteAccount(email: String!, password: String!): String
}

extend type Query {
    getCharacterById(id: ID!, context: Context!) : Character
    getCharactersByName(name: String!, context: Context!): [Character]!
    getCharactersByVersion(version:String!, context: Context!) : [Character]!
    getUsersCharacters(context: Context!) : [Character]!

    getRaceById(id: ID!): Race
    getRacesByName(name: String!) : [Race]!
    getRacesByVersion(version: String!) : [Race]!

    getClassById(id:ID!): Class!
    getClassesByVersion(version: String): [Class]!
    getClassesByName(name: String): [Class]!

    getVersionSheet(version: String!): Version
    getVersionSkills(version: String!): Version

    getVersionInfoType(version: String!, type: String!): Version

    getVersionItems(version: String) : [Item]!
    getVersionItemType(version: String, type: ObjType): [Item]!
    getItemsByClasses(version: String, classes: [String]!): [Item]!
    getItemsByClassesIn(version: String, classes: [String]!): [Item]!

    getUserInfo(email:String, context: Context!): User
}


